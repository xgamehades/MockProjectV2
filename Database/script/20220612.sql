-- MySQL Script generated by MySQL Workbench
-- Mon Sep 12 10:29:20 2022
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema mock_tts_10
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `mock_tts_10` ;

-- -----------------------------------------------------
-- Schema mock_tts_10
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mock_tts_10` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci ;
USE `mock_tts_10` ;

-- -----------------------------------------------------
-- Table `mock_tts_10`.`accounts`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mock_tts_10`.`accounts` ;

CREATE TABLE IF NOT EXISTS `mock_tts_10`.`accounts` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `username` VARCHAR(200) NOT NULL,
  `password` VARCHAR(500) NOT NULL,
  `create_at` DATETIME NULL DEFAULT now(),
  `update_at` DATETIME NULL DEFAULT now(),
  `is_delete` BIT(1) NULL DEFAULT 0,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `username` (`username` ASC) VISIBLE)
ENGINE = InnoDB
AUTO_INCREMENT = 5
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `mock_tts_10`.`roles`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mock_tts_10`.`roles` ;

CREATE TABLE IF NOT EXISTS `mock_tts_10`.`roles` (
  `id` INT NOT NULL,
  `name` VARCHAR(100) NOT NULL,
  `description` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `name` (`name` ASC) VISIBLE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `mock_tts_10`.`accounts_roles`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mock_tts_10`.`accounts_roles` ;

CREATE TABLE IF NOT EXISTS `mock_tts_10`.`accounts_roles` (
  `account_id` INT NOT NULL,
  `role_id` INT NOT NULL,
  PRIMARY KEY (`account_id`, `role_id`),
  INDEX `role_id` (`role_id` ASC) VISIBLE,
  CONSTRAINT `accounts_roles_ibfk_1`
    FOREIGN KEY (`account_id`)
    REFERENCES `mock_tts_10`.`accounts` (`id`),
  CONSTRAINT `accounts_roles_ibfk_2`
    FOREIGN KEY (`role_id`)
    REFERENCES `mock_tts_10`.`roles` (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `mock_tts_10`.`actions`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mock_tts_10`.`actions` ;

CREATE TABLE IF NOT EXISTS `mock_tts_10`.`actions` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `code` VARCHAR(20) NOT NULL,
  `description` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `code` (`code` ASC) VISIBLE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `mock_tts_10`.`categories`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mock_tts_10`.`categories` ;

CREATE TABLE IF NOT EXISTS `mock_tts_10`.`categories` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(500) CHARACTER SET 'utf8' NOT NULL,
  `description` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
AUTO_INCREMENT = 20
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `mock_tts_10`.`status`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mock_tts_10`.`status` ;

CREATE TABLE IF NOT EXISTS `mock_tts_10`.`status` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `code` VARCHAR(200) NOT NULL,
  `name` VARCHAR(200) CHARACTER SET 'utf8' NOT NULL,
  `description` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
AUTO_INCREMENT = 6
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `mock_tts_10`.`products`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mock_tts_10`.`products` ;

CREATE TABLE IF NOT EXISTS `mock_tts_10`.`products` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `code` VARCHAR(100) NOT NULL,
  `name` TEXT NOT NULL,
  `description` TEXT NULL DEFAULT NULL,
  `status_id` INT NULL DEFAULT 0,
  `supplier_id` INT NULL DEFAULT NULL,
  `account_id` INT NOT NULL,
  `create_at` DATETIME NULL DEFAULT now(),
  `update_at` DATETIME NULL DEFAULT NULL,
  `is_delete` BIT(1) NULL DEFAULT 0,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `code` (`code` ASC) VISIBLE,
  INDEX `supplier_id` (`supplier_id` ASC) VISIBLE,
  INDEX `status_id` (`status_id` ASC) VISIBLE,
  INDEX `account_id` (`account_id` ASC) VISIBLE,
  CONSTRAINT `products_ibfk_2`
    FOREIGN KEY (`status_id`)
    REFERENCES `mock_tts_10`.`status` (`id`),
  CONSTRAINT `products_ibfk_3`
    FOREIGN KEY (`account_id`)
    REFERENCES `mock_tts_10`.`accounts` (`id`))
ENGINE = InnoDB
AUTO_INCREMENT = 19
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `mock_tts_10`.`categories_products`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mock_tts_10`.`categories_products` ;

CREATE TABLE IF NOT EXISTS `mock_tts_10`.`categories_products` (
  `product_id` INT NOT NULL,
  `category_id` INT NOT NULL,
  PRIMARY KEY (`product_id`, `category_id`),
  INDEX `category_id` (`category_id` ASC) VISIBLE,
  CONSTRAINT `categories_products_ibfk_1`
    FOREIGN KEY (`product_id`)
    REFERENCES `mock_tts_10`.`products` (`id`),
  CONSTRAINT `categories_products_ibfk_2`
    FOREIGN KEY (`category_id`)
    REFERENCES `mock_tts_10`.`categories` (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `mock_tts_10`.`suppliers`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mock_tts_10`.`suppliers` ;

CREATE TABLE IF NOT EXISTS `mock_tts_10`.`suppliers` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `code` VARCHAR(100) NULL DEFAULT NULL,
  `name` TEXT NOT NULL,
  `email` VARCHAR(100) NOT NULL,
  `phone` VARCHAR(20) NOT NULL,
  `address` TEXT NOT NULL,
  `account_id` INT NULL DEFAULT NULL,
  `create_at` DATETIME NULL DEFAULT now(),
  `update_at` DATETIME NULL DEFAULT NULL,
  `is_delete` BIT(1) NULL DEFAULT 0,
  `status_transaction` BIT(1) NULL DEFAULT 0,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `email` (`email` ASC) VISIBLE,
  UNIQUE INDEX `phone` (`phone` ASC) VISIBLE,
  UNIQUE INDEX `code` (`code` ASC) VISIBLE,
  UNIQUE INDEX `code_2` (`code` ASC) VISIBLE,
  INDEX `account_id` (`account_id` ASC) VISIBLE,
  CONSTRAINT `suppliers_ibfk_1`
    FOREIGN KEY (`account_id`)
    REFERENCES `mock_tts_10`.`accounts` (`id`))
ENGINE = InnoDB
AUTO_INCREMENT = 61
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `mock_tts_10`.`contacts`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mock_tts_10`.`contacts` ;

CREATE TABLE IF NOT EXISTS `mock_tts_10`.`contacts` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `code` VARCHAR(100) NOT NULL,
  `supplier_id` INT NOT NULL,
  `status_id` INT NULL DEFAULT 0,
  `account_id` INT NOT NULL,
  `create_at` DATETIME NULL DEFAULT now(),
  `update_at` DATETIME NULL DEFAULT NULL,
  `is_delete` BIT(1) NULL DEFAULT 0,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `code` (`code` ASC) VISIBLE,
  INDEX `account_id` (`account_id` ASC) VISIBLE,
  INDEX `supplier_id` (`supplier_id` ASC) VISIBLE,
  INDEX `status_id` (`status_id` ASC) VISIBLE,
  CONSTRAINT `contacts_ibfk_1`
    FOREIGN KEY (`account_id`)
    REFERENCES `mock_tts_10`.`accounts` (`id`),
  CONSTRAINT `contacts_ibfk_2`
    FOREIGN KEY (`supplier_id`)
    REFERENCES `mock_tts_10`.`suppliers` (`id`),
  CONSTRAINT `contacts_ibfk_3`
    FOREIGN KEY (`status_id`)
    REFERENCES `mock_tts_10`.`status` (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `mock_tts_10`.`contacts_status`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mock_tts_10`.`contacts_status` ;

CREATE TABLE IF NOT EXISTS `mock_tts_10`.`contacts_status` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `contact_id` INT NOT NULL,
  `status_id` INT NOT NULL,
  `create_at` DATETIME NULL DEFAULT now(),
  PRIMARY KEY (`id`),
  INDEX `contact_id` (`contact_id` ASC) VISIBLE,
  INDEX `status_id` (`status_id` ASC) VISIBLE,
  CONSTRAINT `contacts_status_ibfk_1`
    FOREIGN KEY (`contact_id`)
    REFERENCES `mock_tts_10`.`contacts` (`id`),
  CONSTRAINT `contacts_status_ibfk_2`
    FOREIGN KEY (`status_id`)
    REFERENCES `mock_tts_10`.`status` (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `mock_tts_10`.`product_variants`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mock_tts_10`.`product_variants` ;

CREATE TABLE IF NOT EXISTS `mock_tts_10`.`product_variants` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `code` VARCHAR(100) NOT NULL,
  `product_id` INT NOT NULL,
  `name` VARCHAR(200) CHARACTER SET 'utf8' NOT NULL,
  `image` TEXT NULL DEFAULT NULL,
  `wholesale_price` DECIMAL(20,2) NULL DEFAULT 0,
  `sale_price` DECIMAL(20,2) NULL DEFAULT 0,
  `import_price` DECIMAL(20,2) NULL DEFAULT 0,
  `is_delete` BIT(1) NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `code` (`code` ASC) VISIBLE,
  INDEX `product_id` (`product_id` ASC) VISIBLE,
  CONSTRAINT `product_variants_ibfk_1`
    FOREIGN KEY (`product_id`)
    REFERENCES `mock_tts_10`.`products` (`id`))
ENGINE = InnoDB
AUTO_INCREMENT = 63
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `mock_tts_10`.`details_contacts`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mock_tts_10`.`details_contacts` ;

CREATE TABLE IF NOT EXISTS `mock_tts_10`.`details_contacts` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `contact_id` INT NOT NULL,
  `product_variant_id` INT NOT NULL,
  `quantity` INT NULL DEFAULT 0,
  PRIMARY KEY (`id`),
  INDEX `contact_id` (`contact_id` ASC) VISIBLE,
  INDEX `product_variant_id` (`product_variant_id` ASC) VISIBLE,
  CONSTRAINT `details_contacts_ibfk_1`
    FOREIGN KEY (`contact_id`)
    REFERENCES `mock_tts_10`.`contacts` (`id`),
  CONSTRAINT `details_contacts_ibfk_2`
    FOREIGN KEY (`product_variant_id`)
    REFERENCES `mock_tts_10`.`product_variants` (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `mock_tts_10`.`inventories`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mock_tts_10`.`inventories` ;

CREATE TABLE IF NOT EXISTS `mock_tts_10`.`inventories` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `code` VARCHAR(100) NOT NULL,
  `name` TEXT NOT NULL,
  `address` TEXT NOT NULL,
  `create_at` DATETIME NULL DEFAULT now(),
  `update_at` DATETIME NULL DEFAULT NULL,
  `is_delete` BIT(1) NULL DEFAULT 0,
  `size` INT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `code` (`code` ASC) VISIBLE)
ENGINE = InnoDB
AUTO_INCREMENT = 4
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `mock_tts_10`.`transport_companies`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mock_tts_10`.`transport_companies` ;

CREATE TABLE IF NOT EXISTS `mock_tts_10`.`transport_companies` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `code` VARCHAR(200) NOT NULL,
  `name` TEXT NOT NULL,
  `email` VARCHAR(200) NOT NULL,
  `phone` VARCHAR(20) NOT NULL,
  `address` TEXT NOT NULL,
  `account_id` INT NOT NULL,
  `create_at` DATETIME NULL DEFAULT now(),
  `update_at` DATETIME NULL DEFAULT now(),
  `is_delete` BIT(1) NULL DEFAULT 0,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `code` (`code` ASC) VISIBLE,
  UNIQUE INDEX `email` (`email` ASC) VISIBLE,
  INDEX `account_id` (`account_id` ASC) VISIBLE,
  CONSTRAINT `transport_companies_ibfk_1`
    FOREIGN KEY (`account_id`)
    REFERENCES `mock_tts_10`.`accounts` (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `mock_tts_10`.`exports`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mock_tts_10`.`exports` ;

CREATE TABLE IF NOT EXISTS `mock_tts_10`.`exports` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `export_inventory_id` INT NOT NULL,
  `receive_inventory_id` INT NOT NULL,
  `status_id` INT NULL DEFAULT 0,
  `transport_company_id` INT NULL DEFAULT NULL,
  `account_id` INT NULL DEFAULT NULL,
  `create_at` DATETIME NULL DEFAULT now(),
  `update_at` DATETIME NULL DEFAULT NULL,
  `is_delete` BIT(1) NULL DEFAULT 0,
  PRIMARY KEY (`id`),
  INDEX `account_id` (`account_id` ASC) VISIBLE,
  INDEX `receive_inventory_id` (`receive_inventory_id` ASC) VISIBLE,
  INDEX `export_inventory_id` (`export_inventory_id` ASC) VISIBLE,
  INDEX `status_id` (`status_id` ASC) VISIBLE,
  INDEX `transport_company_id` (`transport_company_id` ASC) VISIBLE,
  CONSTRAINT `exports_ibfk_1`
    FOREIGN KEY (`account_id`)
    REFERENCES `mock_tts_10`.`accounts` (`id`),
  CONSTRAINT `exports_ibfk_2`
    FOREIGN KEY (`receive_inventory_id`)
    REFERENCES `mock_tts_10`.`inventories` (`id`),
  CONSTRAINT `exports_ibfk_3`
    FOREIGN KEY (`export_inventory_id`)
    REFERENCES `mock_tts_10`.`inventories` (`id`),
  CONSTRAINT `exports_ibfk_4`
    FOREIGN KEY (`status_id`)
    REFERENCES `mock_tts_10`.`status` (`id`),
  CONSTRAINT `exports_ibfk_5`
    FOREIGN KEY (`transport_company_id`)
    REFERENCES `mock_tts_10`.`transport_companies` (`id`))
ENGINE = InnoDB
AUTO_INCREMENT = 21
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `mock_tts_10`.`details_exports`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mock_tts_10`.`details_exports` ;

CREATE TABLE IF NOT EXISTS `mock_tts_10`.`details_exports` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `export_id` INT NOT NULL,
  `product_variant_id` INT NOT NULL,
  `quantity` INT NULL DEFAULT 0,
  PRIMARY KEY (`id`),
  INDEX `export_id` (`export_id` ASC) VISIBLE,
  INDEX `product_variant_id` (`product_variant_id` ASC) VISIBLE,
  CONSTRAINT `details_exports_ibfk_1`
    FOREIGN KEY (`export_id`)
    REFERENCES `mock_tts_10`.`exports` (`id`),
  CONSTRAINT `details_exports_ibfk_2`
    FOREIGN KEY (`product_variant_id`)
    REFERENCES `mock_tts_10`.`product_variants` (`id`))
ENGINE = InnoDB
AUTO_INCREMENT = 31
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `mock_tts_10`.`imports`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mock_tts_10`.`imports` ;

CREATE TABLE IF NOT EXISTS `mock_tts_10`.`imports` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `supplier_id` INT NULL DEFAULT NULL,
  `account_id` INT NOT NULL,
  `note` VARCHAR(250) CHARACTER SET 'utf8' NULL DEFAULT NULL,
  `code` VARCHAR(50) CHARACTER SET 'utf8' NULL DEFAULT NULL,
  `total_price` DECIMAL(20,2) NOT NULL,
  `inventory_id` INT NOT NULL,
  `is_paid` BIT(1) NULL DEFAULT b'0',
  `is_import` BIT(1) NULL DEFAULT b'0',
  `is_done` BIT(1) NULL DEFAULT b'0',
  `delivery_date` VARCHAR(50) NULL DEFAULT NULL,
  `is_return` BIT(1) NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `code` (`code` ASC) VISIBLE,
  INDEX `account_id` (`account_id` ASC) VISIBLE,
  INDEX `imports_ibkf_3` (`supplier_id` ASC) VISIBLE,
  INDEX `imports_ibkf_5` (`inventory_id` ASC) VISIBLE,
  CONSTRAINT `imports_ibfk_2`
    FOREIGN KEY (`account_id`)
    REFERENCES `mock_tts_10`.`accounts` (`id`),
  CONSTRAINT `imports_ibkf_3`
    FOREIGN KEY (`supplier_id`)
    REFERENCES `mock_tts_10`.`suppliers` (`id`),
  CONSTRAINT `imports_ibkf_5`
    FOREIGN KEY (`inventory_id`)
    REFERENCES `mock_tts_10`.`inventories` (`id`))
ENGINE = InnoDB
AUTO_INCREMENT = 137
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `mock_tts_10`.`details_imports`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mock_tts_10`.`details_imports` ;

CREATE TABLE IF NOT EXISTS `mock_tts_10`.`details_imports` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `import_id` INT NULL DEFAULT NULL,
  `quantity` INT NULL DEFAULT 0,
  `total_price` DECIMAL(20,2) NOT NULL,
  `product_variant_id` INT NULL DEFAULT NULL,
  `import_price` DECIMAL(20,2) NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `import_id` (`import_id` ASC) VISIBLE,
  INDEX `foreign_key_name` (`product_variant_id` ASC) VISIBLE,
  CONSTRAINT `details_imports_ibfk_1`
    FOREIGN KEY (`import_id`)
    REFERENCES `mock_tts_10`.`imports` (`id`),
  CONSTRAINT `foreign_key_name`
    FOREIGN KEY (`product_variant_id`)
    REFERENCES `mock_tts_10`.`product_variants` (`id`))
ENGINE = InnoDB
AUTO_INCREMENT = 269
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `mock_tts_10`.`return_import`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mock_tts_10`.`return_import` ;

CREATE TABLE IF NOT EXISTS `mock_tts_10`.`return_import` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `create_date` DATETIME NULL DEFAULT now(),
  `import_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `tbl_import_return` (`import_id` ASC) VISIBLE,
  CONSTRAINT `tbl_import_return`
    FOREIGN KEY (`import_id`)
    REFERENCES `mock_tts_10`.`imports` (`id`))
ENGINE = InnoDB
AUTO_INCREMENT = 63
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `mock_tts_10`.`details_return_import`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mock_tts_10`.`details_return_import` ;

CREATE TABLE IF NOT EXISTS `mock_tts_10`.`details_return_import` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `details_import_id` INT NULL DEFAULT NULL,
  `quantity` INT NOT NULL,
  `refund_reason` VARCHAR(250) CHARACTER SET 'utf8' NULL DEFAULT NULL,
  `return_import_id` INT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `tbl_return_import_key` (`details_import_id` ASC) VISIBLE,
  INDEX `tbl_return_import_2` (`return_import_id` ASC) VISIBLE,
  CONSTRAINT `tbl_return_import_2`
    FOREIGN KEY (`return_import_id`)
    REFERENCES `mock_tts_10`.`return_import` (`id`),
  CONSTRAINT `tbl_return_import_key`
    FOREIGN KEY (`details_import_id`)
    REFERENCES `mock_tts_10`.`details_imports` (`id`))
ENGINE = InnoDB
AUTO_INCREMENT = 121
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `mock_tts_10`.`employees`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mock_tts_10`.`employees` ;

CREATE TABLE IF NOT EXISTS `mock_tts_10`.`employees` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `full_name` TEXT NOT NULL,
  `image` TEXT NULL DEFAULT NULL,
  `email` VARCHAR(100) NOT NULL,
  `phone` VARCHAR(20) NOT NULL,
  `address` VARCHAR(500) CHARACTER SET 'utf8' NOT NULL,
  `account_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `email` (`email` ASC) VISIBLE,
  UNIQUE INDEX `phone` (`phone` ASC) VISIBLE,
  INDEX `account_id` (`account_id` ASC) VISIBLE,
  CONSTRAINT `employees_ibfk_1`
    FOREIGN KEY (`account_id`)
    REFERENCES `mock_tts_10`.`accounts` (`id`))
ENGINE = InnoDB
AUTO_INCREMENT = 5
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `mock_tts_10`.`exports_status`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mock_tts_10`.`exports_status` ;

CREATE TABLE IF NOT EXISTS `mock_tts_10`.`exports_status` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `export_id` INT NOT NULL,
  `status_id` INT NULL DEFAULT NULL,
  `create_at` DATETIME NULL DEFAULT now(),
  `account_create` INT NULL DEFAULT NULL,
  `account_receive` INT NULL DEFAULT NULL,
  `account_send` INT NULL DEFAULT NULL,
  `code` VARCHAR(255) NULL DEFAULT NULL,
  `date_receive` VARCHAR(255) NULL DEFAULT NULL,
  `date_send` VARCHAR(255) NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `export_id` (`export_id` ASC) VISIBLE,
  INDEX `status_id` (`status_id` ASC) VISIBLE,
  CONSTRAINT `exports_status_ibfk_1`
    FOREIGN KEY (`export_id`)
    REFERENCES `mock_tts_10`.`exports` (`id`))
ENGINE = InnoDB
AUTO_INCREMENT = 37
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `mock_tts_10`.`i_statistic`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mock_tts_10`.`i_statistic` ;

CREATE TABLE IF NOT EXISTS `mock_tts_10`.`i_statistic` (
  `product_variant_id` INT NULL DEFAULT NULL,
  `product_variant_code` TEXT NULL DEFAULT NULL,
  `product_variant_name` TEXT NULL DEFAULT NULL,
  `import_number` INT NULL DEFAULT NULL,
  `return_number` INT NULL DEFAULT NULL,
  `export_number` INT NULL DEFAULT NULL,
  `quantity` INT NULL DEFAULT NULL)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `mock_tts_10`.`import_seqid`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mock_tts_10`.`import_seqid` ;

CREATE TABLE IF NOT EXISTS `mock_tts_10`.`import_seqid` (
  `id` INT NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
AUTO_INCREMENT = 135
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `mock_tts_10`.`imports_status`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mock_tts_10`.`imports_status` ;

CREATE TABLE IF NOT EXISTS `mock_tts_10`.`imports_status` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `import_id` INT NOT NULL,
  `status_id` INT NOT NULL,
  `create_at` DATETIME NULL DEFAULT now(),
  PRIMARY KEY (`id`),
  INDEX `import_id` (`import_id` ASC) VISIBLE,
  INDEX `status_id` (`status_id` ASC) VISIBLE,
  CONSTRAINT `imports_status_ibfk_1`
    FOREIGN KEY (`import_id`)
    REFERENCES `mock_tts_10`.`imports` (`id`),
  CONSTRAINT `imports_status_ibfk_2`
    FOREIGN KEY (`status_id`)
    REFERENCES `mock_tts_10`.`status` (`id`))
ENGINE = InnoDB
AUTO_INCREMENT = 332
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `mock_tts_10`.`inventories_accounts`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mock_tts_10`.`inventories_accounts` ;

CREATE TABLE IF NOT EXISTS `mock_tts_10`.`inventories_accounts` (
  `account_id` INT NOT NULL,
  `inventory_id` INT NOT NULL,
  PRIMARY KEY (`account_id`, `inventory_id`),
  INDEX `inventory_id` (`inventory_id` ASC) VISIBLE,
  CONSTRAINT `inventories_accounts_ibfk_1`
    FOREIGN KEY (`account_id`)
    REFERENCES `mock_tts_10`.`accounts` (`id`),
  CONSTRAINT `inventories_accounts_ibfk_2`
    FOREIGN KEY (`inventory_id`)
    REFERENCES `mock_tts_10`.`inventories` (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `mock_tts_10`.`inventories_product_variant`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mock_tts_10`.`inventories_product_variant` ;

CREATE TABLE IF NOT EXISTS `mock_tts_10`.`inventories_product_variant` (
  `inventory_id` INT NOT NULL,
  `product_variant_id` INT NOT NULL,
  `quantity` INT NULL DEFAULT 0,
  `is_delete` BIT(1) NULL DEFAULT 0,
  PRIMARY KEY (`inventory_id`, `product_variant_id`),
  INDEX `product_variant_id` (`product_variant_id` ASC) VISIBLE,
  CONSTRAINT `inventories_product_variant_ibfk_1`
    FOREIGN KEY (`inventory_id`)
    REFERENCES `mock_tts_10`.`inventories` (`id`),
  CONSTRAINT `inventories_product_variant_ibfk_2`
    FOREIGN KEY (`product_variant_id`)
    REFERENCES `mock_tts_10`.`product_variants` (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `mock_tts_10`.`logs`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mock_tts_10`.`logs` ;

CREATE TABLE IF NOT EXISTS `mock_tts_10`.`logs` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `account_id` INT NOT NULL,
  `action_id` INT NOT NULL,
  `target_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `account_id` (`account_id` ASC) VISIBLE,
  INDEX `action_id` (`action_id` ASC) VISIBLE,
  CONSTRAINT `logs_ibfk_1`
    FOREIGN KEY (`account_id`)
    REFERENCES `mock_tts_10`.`accounts` (`id`),
  CONSTRAINT `logs_ibfk_2`
    FOREIGN KEY (`action_id`)
    REFERENCES `mock_tts_10`.`actions` (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `mock_tts_10`.`options`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mock_tts_10`.`options` ;

CREATE TABLE IF NOT EXISTS `mock_tts_10`.`options` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `product_id` INT NOT NULL,
  `name` VARCHAR(200) CHARACTER SET 'utf8' NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `product_id` (`product_id` ASC) VISIBLE,
  CONSTRAINT `options_ibfk_1`
    FOREIGN KEY (`product_id`)
    REFERENCES `mock_tts_10`.`products` (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `mock_tts_10`.`option_values`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mock_tts_10`.`option_values` ;

CREATE TABLE IF NOT EXISTS `mock_tts_10`.`option_values` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `option_id` INT NOT NULL,
  `name` VARCHAR(200) CHARACTER SET 'utf8' NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `option_id` (`option_id` ASC) VISIBLE,
  CONSTRAINT `option_values_ibfk_1`
    FOREIGN KEY (`option_id`)
    REFERENCES `mock_tts_10`.`options` (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `mock_tts_10`.`product_variant_options`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mock_tts_10`.`product_variant_options` ;

CREATE TABLE IF NOT EXISTS `mock_tts_10`.`product_variant_options` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `variant_id` INT NOT NULL,
  `option_value_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `option_value_id` (`option_value_id` ASC) VISIBLE,
  INDEX `variant_id` (`variant_id` ASC) VISIBLE,
  CONSTRAINT `product_variant_options_ibfk_1`
    FOREIGN KEY (`option_value_id`)
    REFERENCES `mock_tts_10`.`option_values` (`id`),
  CONSTRAINT `product_variant_options_ibfk_2`
    FOREIGN KEY (`variant_id`)
    REFERENCES `mock_tts_10`.`product_variants` (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `mock_tts_10`.`supplier_seqid`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mock_tts_10`.`supplier_seqid` ;

CREATE TABLE IF NOT EXISTS `mock_tts_10`.`supplier_seqid` (
  `id` INT NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
AUTO_INCREMENT = 27
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

USE `mock_tts_10` ;

-- -----------------------------------------------------
-- procedure count_product_by_filter
-- -----------------------------------------------------

USE `mock_tts_10`;
DROP procedure IF EXISTS `mock_tts_10`.`count_product_by_filter`;

DELIMITER $$
USE `mock_tts_10`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `count_product_by_filter`(in key_word text,in sort_by text,in is_desc bit,in page int,in size int,in is_delete bit)
BEGIN



declare search_value text ;

set search_value=lower(concat('%',key_word,'%'));

select  count(table1.total) from (select 0 as total  from products left join product_variants on products.id=product_variants.product_id

left join inventories_product_variant on product_variants.id=inventories_product_variant.product_variant_id 

where (lower(products.name) like search_value or lower(products.code) like search_value) and products.is_delete=is_delete

group by(products.id) ) as table1  

group by table1.total;

 

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure delete_category
-- -----------------------------------------------------

USE `mock_tts_10`;
DROP procedure IF EXISTS `mock_tts_10`.`delete_category`;

DELIMITER $$
USE `mock_tts_10`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `delete_category`(IN categories_id int)
BEGIN

				declare result int;

                if  not exists (select * from categories where id = categories_id) then

                -- trả về 0 khi mã danh mục không tồn tại 

				set @result=0 ;

                else 	

						start transaction;

								begin

									DECLARE EXIT HANDLER FOR sqlstate '23000' 

									set @result=1 ;

									-- trả về 1 khi  không xóa được sản phẩm với mã danh mục truyền vào

									delete from categories_products where categories_products.category_id = categories_id;    

									-- trả về 2 khi không xóa được danh mục

									set @result=2 ;

									delete from categories where id = categories_id;

									-- trả về 3 tức là đã xóa thành công

									set @result=3;



									commit;

									end;

					end if;

				select @result;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure filter_product
-- -----------------------------------------------------

USE `mock_tts_10`;
DROP procedure IF EXISTS `mock_tts_10`.`filter_product`;

DELIMITER $$
USE `mock_tts_10`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `filter_product`(in key_word text,in sort_by text,in is_desc bit,in page int,in size int,in is_delete bit)
BEGIN

declare offset_number int ;

declare search_value text;

set search_value=lower(concat('%',key_word,'%'));

set offset_number=(page-1)*size;

 

 

 
DROP TABLE IF EXISTS `mock_tts_10`.`products_count` ;
 CREATE TEMPORARY TABLE products_count (

		id int,

		code text,

		name text,

        description text,

        status_id int ,

        supplier_id int,

        account_id int,

        create_at datetime,

        update_at datetime,

        is_delete bit,

        number_of_variant int,

        total int



		);



insert into products_count (select products.*,count(product_variants.id) as number_of_variant,sum(IF(quantity>0,quantity,0)) as total from products left join product_variants on products.id=product_variants.product_id

left join inventories_product_variant on product_variants.id=inventories_product_variant.product_variant_id 

where (lower(products.name) like search_value or lower(products.code) like search_value) and products.is_delete=is_delete

group by(products.id) ) limit size offset offset_number;

 

 

 

   if (is_desc=true) then

 begin 

 	select * from products_count order by sort_by desc ;

 end;

 else

 begin

 	select * from products_count order by sort_by asc;



 end;

 end if ;








END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure get_new_variant_code
-- -----------------------------------------------------

USE `mock_tts_10`;
DROP procedure IF EXISTS `mock_tts_10`.`get_new_variant_code`;

DELIMITER $$
USE `mock_tts_10`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `get_new_variant_code`()
BEGIN
	declare newcode  varchar(20);
     

    select concat('SPV',id+1) from  product_variants order by id desc limit 1;
   
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure get_productvariant_byname
-- -----------------------------------------------------

USE `mock_tts_10`;
DROP procedure IF EXISTS `mock_tts_10`.`get_productvariant_byname`;

DELIMITER $$
USE `mock_tts_10`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `get_productvariant_byname`(in inventoryId int, valueText text)
BEGIN

    begin

        select * from product_variants inner join inventories_product_variant

                                                  on product_variants.id = inventories_product_variant.product_variant_id

        where inventories_product_variant.inventory_id = inventoryId and (product_variants.name like concat("%", valueText, "%") or product_variants.code like concat("%", valueText, "%"));

    end;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure get_statistic_import
-- -----------------------------------------------------

USE `mock_tts_10`;
DROP procedure IF EXISTS `mock_tts_10`.`get_statistic_import`;

DELIMITER $$
USE `mock_tts_10`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `get_statistic_import`(in inventory_id int ,in supplier_id int,in start_date datetime,in end_date datetime,in sort_by text,in sort_dir bit,in page int, in size int ,in key_search text)
BEGIN
 

DROP TABLE IF EXISTS `mock_tts_10`.`p_return` ;
DROP TABLE IF EXISTS `mock_tts_10`.`p_receive` ;
DROP TABLE IF EXISTS `mock_tts_10`.`final` ;

CREATE TEMPORARY TABLE p_return (
	import_id   int , 
    details_import_id  int , 
    return_import_id  int , 
    product_variant_id  int , 
    return_number  int 
		);
        CREATE TEMPORARY TABLE p_receive (
	inventory_id int,
    supplier_id int,
    account_id int,
    import_id int,
    import_code text,
    details_import_id int,
    product_variant_id int,
    import_price decimal(20,2),
    import_number int ,
    total_price decimal(20,2) ,
    delivery_date text,
    create_at datetime
		);
	
       CREATE TEMPORARY TABLE final (
    inventory_id int,
    supplier_id int,
    account_id int,
    import_id int,
    import_code text,
    details_import_id int,
    product_variant_id int,
    import_price decimal(20,2),
    import_number int ,
    total_price decimal(20,2) ,
    delivery_date text,
    create_at datetime,
    code text,
    name text,
    return_number int,
    receive_number int ,
    product_id int,
    product_code text
  );
    insert into p_receive 
    select imports.inventory_id as inventory_id, 
    imports.supplier_id as supplier_id,
   imports.account_id as account_id,
    imports.id as import_id,
    imports.code as import_code,
    details_imports.id as details_import_id,
    product_variant_id,
    details_imports.import_price as import_price,
    details_imports.quantity as import_number,
    imports.total_price,
    delivery_date,
    create_at
from  details_imports  left join imports on details_imports.import_id=imports.id left join imports_status on imports.id=imports_status.import_id

where imports.is_done=true and imports.is_import=true and imports_status.id and status_id=4 ;

insert into p_return 
select details_imports.import_id as import_id,
 details_imports.id as details_import_id,
 return_import_id,
product_variant_id,
sum(details_return_import.quantity )as return_number
from return_import inner join details_return_import on return_import.id=details_return_import.return_import_id 
	inner join details_imports on details_imports.id=details_return_import.details_import_id
    group by details_import_id , product_variant_id;

insert into final select tbl1.* ,products.code as product_code from
(select p_receive.*,product_variants.code as code,product_variants.name as name,if(p_return.return_number>0,p_return.return_number,0) as return_number,(p_receive.import_number-if(p_return.return_number>0,p_return.return_number,0)) as receive_number  ,product_variants.product_id as product_id
from p_receive left join p_return on p_receive.details_import_id =p_return.details_import_id left join product_variants on product_variants.id=p_receive.product_variant_id
where create_at>=start_date and create_at<=end_date ) as tbl1 left join products on products.id=tbl1.product_id
;



	set @from_string =' from final ' ;

	set @search_value=concat('"%',lower(key_search),'%"');
	set @clause =concat(' where create_at>="',start_date,'" and create_at<="',end_date,'"' ,' and (lower(code) like ',@search_value,' or lower(name) like  ',@search_value ,') ' );
    set @col =' inventory_id, supplier_id, account_id, import_id, import_code, details_import_id, product_variant_id, sum(import_price*(import_number-return_number))/sum(import_number-return_number) as avg_price, sum(import_number) as import_number, sum(return_number) as return_number, (sum(import_number)- sum(return_number)) as receive_number, total_price, delivery_date, create_at, code, name,product_id,product_code' ;
    set @group_by =' group by product_variant_id ';
      if(sort_dir) then 
    begin
        set @order_by =concat(' order by ',sort_by,' asc' );

    end;
    else
    begin
        set @order_by =concat(' order by ',sort_by,' desc' );

    end;
    end if;
    if( inventory_id>0) then
    begin
		set @clause=concat(@clause,' and inventory_id= ',inventory_id);
    end;
    end if;
    if(supplier_id>0) then 
    begin
		set @clause=concat(@clause,' and supplier_id= ',supplier_id);
    end;
    end if;
    
    
    set @query_string=concat('select ',@col,@from_string,@clause,@group_by,@order_by);
        if(page>0 && size>0) then 
    begin
		set @query_string=concat(@query_string,' limit ',size,' offset ',(page-1)*size );
    end;
    end if;
    
-- select @query_string;
PREPARE stmt1 FROM @query_string;
EXECUTE stmt1 ;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure get_statistic_import_extend
-- -----------------------------------------------------

USE `mock_tts_10`;
DROP procedure IF EXISTS `mock_tts_10`.`get_statistic_import_extend`;

DELIMITER $$
USE `mock_tts_10`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `get_statistic_import_extend`(in inventory_id int ,in supplier_id int,in start_date datetime,in end_date datetime,in sort_by text,in sort_dir bit,in page int, in size int,in key_search text )
BEGIN
 

DROP TABLE IF EXISTS `mock_tts_10`.`p_return` ;
DROP TABLE IF EXISTS `mock_tts_10`.`p_receive` ;
DROP TABLE IF EXISTS `mock_tts_10`.`final` ;

CREATE TEMPORARY TABLE p_return (
	import_id   int , 
    details_import_id  int , 
    return_import_id  int , 
    product_variant_id  int , 
    return_number  int 
		);
        CREATE TEMPORARY TABLE p_receive (
	inventory_id int,
    supplier_id int,
    account_id int,
    import_id int,
    import_code text,
    details_import_id int,
    product_variant_id int,
    import_price decimal(20,2),
    import_number int ,
    total_price decimal(20,2) ,
    delivery_date text,
    create_at datetime
		);
	
       CREATE TEMPORARY TABLE final (
    inventory_id int,
    supplier_id int,
    account_id int,
    import_id int,
    import_code text,
    details_import_id int,
    product_variant_id int,
    import_price decimal(20,2),
    import_number int ,
    total_price decimal(20,2) ,
    delivery_date text,
    create_at datetime,
    code text,
    name text,
    return_number int,
    receive_number int
  );
    insert into p_receive 
    select imports.inventory_id as inventory_id, 
    imports.supplier_id as supplier_id,
   imports.account_id as account_id,
    imports.id as import_id,
    imports.code as import_code,
    details_imports.id as details_import_id,
    product_variant_id,
    details_imports.import_price as import_price,
    details_imports.quantity as import_number,
    imports.total_price,
    delivery_date,
    create_at
from  details_imports  left join imports on details_imports.import_id=imports.id left join imports_status on imports.id=imports_status.import_id

where imports.is_done=true and imports.is_import=true and imports_status.id and status_id=4 ;

insert into p_return 
select details_imports.import_id as import_id,
 details_imports.id as details_import_id,
 return_import_id,
product_variant_id,
sum(details_return_import.quantity )as return_number
from return_import inner join details_return_import on return_import.id=details_return_import.return_import_id 
	inner join details_imports on details_imports.id=details_return_import.details_import_id
    group by details_import_id , product_variant_id;

insert into final
select p_receive.*,product_variants.code as code,product_variants.name as name,if(p_return.return_number>0,p_return.return_number,0) as return_number,(p_receive.import_number-if(p_return.return_number>0,p_return.return_number,0)) as receive_number  
from p_receive left join p_return on p_receive.details_import_id =p_return.details_import_id left join product_variants on product_variants.id=p_receive.product_variant_id
where create_at>=start_date and create_at<=end_date 
;


	set @search_value=concat('"%',lower(key_search),'%"');
	set @clause =concat(' where create_at>="',start_date,'" and create_at<="',end_date,'"' ,' and (lower(code) like ',@search_value,' or lower(name) like  ',@search_value ,') ' );
	set @from_string =' from final ' ;
    set @col =' inventory_id, supplier_id, account_id, import_id, import_code, details_import_id, product_variant_id, import_price, import_number , return_number, (import_number- return_number) as receive_number,(import_number- return_number)*import_price total_price, delivery_date, create_at, code ,name' ;
    set @group_by ='  ';
    if(sort_dir) then 
    begin
        set @order_by =concat(' order by ',sort_by,' asc' );

    end;
    else
    begin
        set @order_by =concat(' order by ',sort_by,' desc' );

    end;
    end if;
    if( inventory_id>0) then
    begin
		set @clause=concat(@clause,' and inventory_id= ',inventory_id);
    end;
    end if;
    if(supplier_id>0) then 
    begin
		set @clause=concat(@clause,' and supplier_id= ',supplier_id);
    end;
    end if;
    
    
    set @query_string=concat('select ',@col,@from_string,@clause,@group_by,@order_by);
        if(page>0 && size>0) then 
    begin
		set @query_string=concat(@query_string,' limit ',size,' offset ',(page-1)*size );
    end;
    end if;
    
-- select @query_string;
PREPARE stmt1 FROM @query_string;
EXECUTE stmt1 ;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure get_statistic_inventory
-- -----------------------------------------------------

USE `mock_tts_10`;
DROP procedure IF EXISTS `mock_tts_10`.`get_statistic_inventory`;

DELIMITER $$
USE `mock_tts_10`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `get_statistic_inventory`(in inventory_id int,in start_date datetime,in end_date datetime,in sort_by text,in sort_dir bit,in page int, in size int ,in key_word text)
BEGIN


DROP TABLE IF EXISTS `mock_tts_10`.`p_export` ;
DROP TABLE IF EXISTS `mock_tts_10`.`p_import` ;

       CREATE TEMPORARY TABLE p_import (
       inventory_id int,
       import_id int,
       detail_import_id int,
       product_variant_id int ,
       product_variant_code text,
       product_variant_name text, 
       product_id int,
       import_price decimal(20,2),
       import_number int, 
       return_number int,
       import_date datetime
		, 
	 status_id int
       );

       CREATE TEMPORARY TABLE p_export (
	export_inventory_id int,
	receive_inventory_id int,
	 export_id int ,
	 export_code text,
	 detail_export_id int, 
	 product_variant_id int,
	 product_variant_code text, 
	 product_variant_name text,
     product_id int,
	 export_number int, 
	 create_at datetime,
	 date_send text,
	 date_receive text, 
	 status_id int
  );
	
        
	

insert into p_import 
	select 
        imports.inventory_id,
		details_imports.import_id as import_id,
		details_imports.id as detail_import_id,
		details_imports.product_variant_id as product_variant_id,
		product_variants.code as product_variant_code,
		product_variants.name as product_variant_name,
        product_variants.product_id as product_id,
		details_imports.import_price as import_price,
		details_imports.quantity as import_number,
		if(p_return.return_number>0,p_return.return_number,0) as return_number,imports_status.create_at as import_date,
        max(imports_status.status_id)
        
		from  details_imports left join imports on imports.id=details_imports.import_id 
		left join (select details_return_import.details_import_id ,sum(details_return_import.quantity) as return_number  
					from details_return_import group by details_return_import.details_import_id ) as p_return on p_return.details_import_id=details_imports.id
							left join product_variants on product_variants.id=details_imports.product_variant_id
						   left join imports_status on imports_status.import_id= details_imports.import_id and imports_status.status_id>=4
		where imports.is_import=true or imports.is_import=true  and create_at<=end_date
        group by imports.inventory_id,details_imports.product_variant_id;

set @key_search=concat('"%',lower(key_word),'%"');


 if(inventory_id>0) then 
    begin
    insert into	 p_export 
		  select 
		exports.export_inventory_id ,
        exports.receive_inventory_id ,
		exports.id as export_id,
		exports_status.code as export_code,
		details_exports.id as detail_export_id,
		product_variants.id as product_variant_id,
		product_variants.code as product_variant_code,
		product_variants.name as product_variant_name,
        product_variants.product_id as product_id,
		quantity as export_number,
		exports_status.create_at as create_at,
		date_send,
		date_receive,
		exports_status.status_id 
		from details_exports left join exports on details_exports.export_id=exports.id left join exports_status on exports_status.export_id=exports.id
		left join product_variants on product_variants.id=details_exports.product_variant_id
		where exports_status.status_id>1 and  STR_TO_DATE(date_send, '%d/%m/%Y %T')<=end_date  ;
         
		insert into p_import select  
        receive_inventory_id, 
        0,
        0,
        
        product_variant_id,
        product_variant_code,
        product_variant_name,
        product_id
        ,
        0,
        p_export.export_number, 
        0, 
        STR_TO_DATE(date_receive, '%d/%m/%Y %T'),
        status_id
        
        from p_export 
		where  STR_TO_DATE(date_receive, '%d/%m/%Y %T')<end_date  ;
        
	set @sql_string=concat('select tbl1.*,if(export_number>0,export_number,0) as export_number,tbl1.import_number-tbl1.return_number-if(export_number>0,export_number,0) as quantity from 
    (select p_import.product_variant_id,p_import.product_variant_code,p_import.product_variant_name ,p_import.product_id,sum(import_number) as import_number ,sum(if(return_number>0,return_number,0))  as return_number 
	from p_import
	where inventory_id=',inventory_id,'
	group by product_variant_id) as tbl1 left join (select product_variant_id,if(export_number>0,export_number,0) as export_number from p_export
	where  export_inventory_id=',inventory_id,' ) as tbl2 on tbl1.product_variant_id=tbl2.product_variant_id '
		,concat(' where (lower(product_variant_code) like ',@key_search,' or lower(product_variant_name) like  ',@key_search ,') ' )
	);
    end;
    else
    begin
      set @sql_string=concat('select tbl1.*,if(export_number>0,export_number,0) as export_number,tbl1.import_number-tbl1.return_number-if(export_number>0,export_number,0) as quantity from
      (select p_import.product_variant_id,p_import.product_variant_code,p_import.product_variant_name ,p_import.product_id,sum(import_number) as import_number ,sum(if(return_number>0,return_number,0))  as return_number 
	from p_import
	group by product_variant_id ) as tbl1 left join (select product_variant_id,if(export_number>0,export_number,0) as export_number from p_export)
	 as tbl2 on tbl1.product_variant_id=tbl2.product_variant_id '
	,concat(' where (lower(product_variant_code) like ',@key_search,' or lower(product_variant_name) like  ',@key_search ,') ' )
	);

    end;
    end if;

    if(sort_dir) then 
    begin
        set @order_by =concat(' order by ',sort_by,' asc' );

    end;
    else
    begin
        set @order_by =concat(' order by ',sort_by,' desc' );

    end;
    end if;
 set @sql_string=concat(@sql_string,@order_by );
        if(page>0 && size>0) then 
    begin
		set @sql_string=concat(@sql_string,' limit ',size,' offset ',(page-1)*size );
    end;
    end if;
    

 PREPARE excute_string FROM @sql_string;
-- select @sql_string;
 EXECUTE excute_string ;


END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure get_statistics
-- -----------------------------------------------------

USE `mock_tts_10`;
DROP procedure IF EXISTS `mock_tts_10`.`get_statistics`;

DELIMITER $$
USE `mock_tts_10`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `get_statistics`(in inventory_id int,in supplier_id int ,in start_date text,in end_date text,in sort_by text,in sort_dir bit,in page int,in size int)
BEGIN

DROP TABLE IF EXISTS `mock_tts_10`.`statistics` ;
 CREATE TEMPORARY TABLE statistics (
	product_id int,
	product_variant_id int,
    variant_name text,
    quantity int ,
    total_price decimal(20,2),
    delivery_date text
 );
 insert into statistics  
 select product_variants.product_id as product_id, product_variant_id,product_variants.name as variant_name, sum(quantity) as quantity,sum(imports.total_price) as total_price, delivery_date
from details_imports inner join imports on imports.id=details_imports.import_id 
inner join product_variants on product_variants.id=details_imports.product_variant_id 
where imports.delivery_date < '20220701'  and imports.supplier_id=supplier_id
group by product_variant_id
order by total_price desc;


select * from statistics;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure gets_statistic_inventory
-- -----------------------------------------------------

USE `mock_tts_10`;
DROP procedure IF EXISTS `mock_tts_10`.`gets_statistic_inventory`;

DELIMITER $$
USE `mock_tts_10`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `gets_statistic_inventory`(in inventory_id int,in start_date text,in end_date text,in sort_by text,in sort_dir bit,in page int, in size int,in key_word text )
BEGIN


DROP TABLE IF EXISTS `mock_tts_10`.`p_export` ;
DROP TABLE IF EXISTS `mock_tts_10`.`p_import` ;
DROP TABLE IF EXISTS `mock_tts_10`.`p_import2` ;

       CREATE TEMPORARY TABLE p_import (
       inventory_id int,
       import_id int,
       detail_import_id int,
       product_variant_id int ,
       product_variant_code text,
       product_variant_name text, 
       import_price decimal(20,2),
       import_number int, 
       return_number int,
       import_date datetime
       );
    CREATE TEMPORARY TABLE p_import2 (
	export_inventory_id int,
	receive_inventory_id int,
	 export_id int ,
	 export_code text,
	 detail_export_id int, 
	 product_variant_id int,
	 product_variant_code text, 
	 product_variant_name text,
	 export_number int, 
	 create_at datetime,
	 date_send text,
	 date_receive text, 
	 status_id int
  );
       CREATE TEMPORARY TABLE p_export (
	export_inventory_id int,
	receive_inventory_id int,
	 export_id int ,
	 export_code text,
	 detail_export_id int, 
	 product_variant_id int,
	 product_variant_code text, 
	 product_variant_name text,
	 export_number int, 
	 create_at datetime,
	 date_send text,
	 date_receive text, 
	 status_id int
  );
	insert into	 p_export 
		  select 
		exports.export_inventory_id ,
        exports.receive_inventory_id ,
		exports.id as export_id,
		exports_status.code as export_code,
		details_exports.id as detail_export_id,
		product_variants.id as product_variant_id,
		product_variants.code as product_variant_code,
		product_variants.name as product_variant_name,
		quantity as export_number,
		exports_status.create_at as create_at,
		date_send,
		date_receive,
		exports_status.status_id 
		from details_exports left join exports on details_exports.export_id=exports.id left join exports_status on exports_status.export_id=exports.id
		left join product_variants on product_variants.id=details_exports.product_variant_id
		where exports_status.status_id>=1   ;
        
		insert into p_import select  
        receive_inventory_id, 
        0,
        0,
        
        product_variant_id,
        product_variant_code,
        product_variant_name,
        0,
        p_export.export_number, 
        0, 
        STR_TO_DATE(date_receive, '%d/%m/%Y %T') from p_export 
		where p_export.receive_inventory_id=inventory_id ;


insert into p_import
		select 
        imports.inventory_id,
		details_imports.import_id as import_id,
		details_imports.id as detail_import_id,
		details_imports.product_variant_id as product_variant_id,
		product_variants.code as product_variant_code,
		product_variants.name as product_variant_name,
		details_imports.import_price as import_price,
		details_imports.quantity as import_number,
		if(p_return.return_number>0,p_return.return_number,0) as return_number
		,imports_status.create_at as import_date
		from  details_imports left join imports on imports.id=details_imports.import_id 
		left join (select details_return_import.details_import_id ,sum(details_return_import.quantity) as return_number  
					from details_return_import group by details_return_import.details_import_id ) as p_return on p_return.details_import_id=details_imports.id
							left join product_variants on product_variants.id=details_imports.product_variant_id
						   left join imports_status on imports_status.import_id= details_imports.import_id and imports_status.status_id=4
		where imports.is_import=true ;

set @sql_string=concat('select tbl1.*,if(export_number>0,export_number,0) as export_number,tbl1.import_number-tbl1.return_number-if(export_number>0,export_number,0) as quantity from (select p_import.product_variant_id,p_import.product_variant_code,p_import.product_variant_name ,sum(import_number) as import_number ,sum(if(return_number>0,return_number,0))  as return_number 
from p_import
where inventory_id=',inventory_id,'
group by product_variant_id) as tbl1 left join (select product_variant_id,if(export_number>0,export_number,0) as export_number from p_export
where export_inventory_id=',inventory_id,') as tbl2 on tbl1.product_variant_id=tbl2.product_variant_id ');

    if(sort_dir) then 
    begin
        set @order_by =concat(' order by ',sort_by,' asc' );

    end;
    else
    begin
        set @order_by =concat(' order by ',sort_by,' desc' );

    end;
    end if;
 set @sql_string=concat(@sql_string,@order_by );
        if(page>0 && size>0) then 
    begin
		set @sql_string=concat(@sql_string,' limit ',size,' offset ',(page-1)*size );
    end;
    end if;
    
-- select @query_string;
PREPARE excute_string FROM @sql_string;
EXECUTE excute_string ;


END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure new_procedure
-- -----------------------------------------------------

USE `mock_tts_10`;
DROP procedure IF EXISTS `mock_tts_10`.`new_procedure`;

DELIMITER $$
USE `mock_tts_10`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `new_procedure`()
BEGIN
set @query_string='select * from imports';
PREPARE stmt1 FROM @query_string;
EXECUTE stmt1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure select_create_at
-- -----------------------------------------------------

USE `mock_tts_10`;
DROP procedure IF EXISTS `mock_tts_10`.`select_create_at`;

DELIMITER $$
USE `mock_tts_10`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_create_at`(in producVariantId int)
BEGIN

    select create_at from products inner join product_variants on products.id = product_variants.product_id where product_variants.id = producVariantId;

END$$

DELIMITER ;
USE `mock_tts_10`;

DELIMITER $$

USE `mock_tts_10`$$
DROP TRIGGER IF EXISTS `mock_tts_10`.`tg_import_insert_code` $$
USE `mock_tts_10`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `mock_tts_10`.`tg_import_insert_code`
BEFORE INSERT ON `mock_tts_10`.`imports`
FOR EACH ROW
IF NEW.code is null or NEW.code = '' THEN

        begin

            INSERT INTO import_seqId VALUES (NULL);

            SET NEW.code = CONCAT('PON', LPAD(LAST_INSERT_ID(), 5, '0'));

        end;

    end if$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
